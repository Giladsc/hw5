import string
from typing import Union, Tuple
import pathlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        self.data = None
        if self.data_fname.exists():
            self.data_fname = self.data_fname
        else:
            raise ValueError('invalid path')

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        bins = np.arange(0, 110, 10)
        h = pd.cut(self.data['age'], bins=bins, right=False)
        hist = h.value_counts().sort_index().values
        plt.bar(bins[:-1], hist, )
        return (hist, bins)
    
    def is_valid_mail(self, mail):
        s = mail.split("@")
        if len(s) != 2: 
            return False
        if (s[0] == "") | (s[1] == ""):
            return False
        if (mail[0] == '.'):
            return False
        if "." not in s[1]:
            return False
        if (s[1][0] == '.'):
            return False
        if (s[1][-1] == '.'):
            return False
        
        return True
        
        
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """
        is_valid = []
        mails = self.data.email
        for mail in mails:
            is_valid.append(self.is_valid_mail(mail))
        return self.data[is_valid].reset_index(drop=True)
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
            all questions, and replaces that missing value with the mean of the
            other grades for that student.

            Returns
            -------
            df : pd.DataFrame
              The corrected DataFrame after insertion of the mean grade
            arr : np.ndarray
                  Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        scores = df[['q1', 'q2', 'q3', 'q4', 'q5']]
        is_na = scores.isna().sum(axis=1) > 0 
        arr = df[is_na].index
        means = scores.apply(np.nanmean, axis=1)
        means_df = pd.DataFrame({'q1': means, 'q2': means, 'q3': means, 'q4': means, 'q5': means,})
        df[['q1', 'q2', 'q3', 'q4', 'q5']] = df[['q1', 'q2', 'q3', 'q4', 'q5']].fillna(value=means_df)
        return (df, arr)
        
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
            with it.

            If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
            score should be NA. Otherwise, the score is simply the mean of the other grades.
            The datatype of score is UInt8, and the floating point raw numbers should be
            rounded down.

            Parameters
            ----------
            maximal_nans_per_sub : int, optional
                Number of allowed NaNs per subject before giving a NA score.

            Returns
            -------
            pd.DataFrame
                A new DF with a new column - "score".
        """
        df = self.data.copy()
        scores = df[['q1', 'q2', 'q3', 'q4', 'q5']]
        count_na = scores.isna().sum(axis=1) 
        means = scores.apply(np.nanmean, axis=1).apply(np.floor)
        means[count_na>maximal_nans_per_sub] = np.nan
        return pd.DataFrame({'score': means}, dtype=pd.UInt8Dtype())
    
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
            and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
    """
        df = self.data.copy()
        df = df[df.age.notna()]
        df['over_40'] = df.age >= 40
        return df.groupby(['gender', 'over_40'])[['q1', 'q2', 'q3', 'q4', 'q5']].mean()
